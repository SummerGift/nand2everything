class Loan {
  field Fraction principal, monthlyPayment, monthsTillPayoff;

  constructor Loan new(int principalAmount) {
    let principal = Fraction.new(principalAmount, 1);

    return this;
  }

  method void setMonthlyPayment(int amount) {
    let monthlyPayment = Fraction.new(amount, 1);
    do updateMonthsTillPayoffBasedOffPaymentAmount();

    return;
  }

  method void setMonthsTillPayoff(int months) {
    let monthsTillPayoff = Fraction.new(months, 1);
    do updateMonthlyPaymentBasedOffNewMonthsTillPayoff();

    return;
  }

  method void updateMonthlyPaymentBasedOffNewMonthsTillPayoff() {
    let monthlyPayment = principal.divideBy(monthsTillPayoff);

    return;
  }

  method void updateMonthsTillPayoffBasedOffPaymentAmount() {
    let monthsTillPayoff = principal.divideBy(monthlyPayment);

    return;
  }

  method void printPrincipal() {
    if (principal.getDenominator() = 1) {
      do Output.printInt(principal.getNumerator());
    } else {
      do principal.printAsMixedFraction();
    }

    return;
  }

  method void printMonthlyPayment() {
    if (monthlyPayment.getDenominator() = 1) {
      do Output.printInt(monthlyPayment.getNumerator());
    } else {
      do monthlyPayment.printAsMixedFraction();
    }

    return;
  }

  method void printMonthsTillPayoff() {
    if (monthsTillPayoff.getDenominator() = 1) {
      do Output.printInt(monthsTillPayoff.getNumerator());
    } else {
      do monthsTillPayoff.printAsMixedFraction();
    }

    return;
  }
  
  function void draw_heart(int location) {
    var int memAddress;
    let memAddress = 16384+location;
    do Memory.poke(memAddress+0, 0);
    do Memory.poke(memAddress+32, 0);
    do Memory.poke(memAddress+64, 6192);
    do Memory.poke(memAddress+96, 9288);
    do Memory.poke(memAddress+128, 17028);
    do Memory.poke(memAddress+160, 2);
    do Memory.poke(memAddress+192, 0);
    do Memory.poke(memAddress+224, 0);
    do Memory.poke(memAddress+256, 4104);
    do Memory.poke(memAddress+288, 2064);
    do Memory.poke(memAddress+320, 1056);
    do Memory.poke(memAddress+352, 960);
    do Memory.poke(memAddress+384, 0);
    do Memory.poke(memAddress+416, 0);
    do Memory.poke(memAddress+448, 0);
    do Memory.poke(memAddress+480, 0);
    return;
  }
}
