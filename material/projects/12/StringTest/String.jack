// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int len;
    field int maxLen;
    field Array chars;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let maxLength = 1;
        }
        let len = 0;
        let maxLen = maxLength;
        let chars = Array.new(maxLength);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do chars.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let chars[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (maxLen > len) {
            let chars[len] = c;
            let len = len + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (len > 0) {
            let len = len - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int v, index, d, temp;
        var boolean isNeg;
        let v = 0;
        let index = 0;

        if (chars[index] = 45) {
            let index = index + 1;
            let isNeg = true;
        } else {
            let isNeg = false;
        }
        while (index < len) {
            let temp = chars[index];
            if ((temp < 48) | (temp > 57)) {
                if (isNeg) {
                    return -v;
                } else {
                    return v;
                }
            }
            let d = String.c2d(temp);
            let index = index + 1;
            let v = v * 10 + d;
        }

        if (isNeg) {
            return -v;
        } else {
            return v;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int n) {
        let len = 0;
        if (n < 0) {
            let n = -n;
            do appendChar(45);
        } 

        do _setInt(n);
        return;
    }

    method void _setInt(int n) {
        var int nextN;

        if (n < 10) {
            do appendChar(String.d2c(n));
        } else {
            let nextN = n / 10;
            do _setInt(nextN);
            do appendChar(String.d2c(n - (nextN * 10)));
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

    function int c2d(char c) {
        return c - 48;
    }

    function char d2c(int d) {
        return d + 48;
    }
}
