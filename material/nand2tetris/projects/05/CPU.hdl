// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Choose the value from Aregister or inM to A Register
    Mux16(a=instruction, b=outMtoAorD, sel=instruction[10], out=OutToRegA);

    // if it's a address value in instruction, then load it into Aregister
    ARegister(in=OutToRegA, load=instruction[0], out=AregOutToALU, out[0..14]=addressM);

    Mux16(a=AregOutToALU, b=inM, sel=instruction[3], out=OutToALU);
 
    // Get a value from memory and output to ALU
    DRegister(in=outMtoAorD, load=instruction[11], out=dRegOutToALU);

    // Perform the calcalte with the value from Dregister and A/M
    ALU(x=dRegOutToALU, y=OutToALU, 
        zx=instruction[4], nx=instruction[5], zy=instruction[6], 
        ny=instruction[7], f=instruction[8], no=instruction[9], 
        out=outMtoAorD, out=outM, zr=equelzero, ng=lesszero);

    And(a=lesszero, b=equelzero, out=greaterzeroout);
    Not(in=greaterzeroout, out=greaterzero);

    // determine if need to write result to memory
    Mux(a=false, b=true, sel=instruction[12], out=writeM);

    And(a=instruction[13], b=lesszero, out=islesszero);
    And(a=instruction[14], b=equelzero, out=isequelzero);
    And(a=instruction[15], b=greaterzero, out=isgreaterzero);

    Or(a=islesszero, b=isequelzero, out=temp);
    Or(a=temp, b=isgreaterzero, out=isjump);
    Not(in=isjump, out=pcplusone);

    // Determine perform PC + 1 or load a new address to PC
    PC(in=AregOutToALU, load=isjump, inc=pcplusone, reset=reset, out[0..14]=pc);
}